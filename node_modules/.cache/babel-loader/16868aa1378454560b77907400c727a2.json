{"ast":null,"code":"import _regeneratorRuntime from\"/Users/petrafranklin/Coding_DoJo/mern/Assignments/covid_tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/petrafranklin/Coding_DoJo/mern/Assignments/covid_tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/petrafranklin/Coding_DoJo/mern/Assignments/covid_tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{fetchDailyData}from'../../api';import{Line,Bar}from'react-chartjs-2';import styles from\"./Chart.module.css\";var Chart=function Chart(_ref){var _ref$data=_ref.data,confirmed=_ref$data.confirmed,recovered=_ref$data.recovered,deaths=_ref$data.deaths,country=_ref.country;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),dailyData=_useState2[0],setDailyData=_useState2[1];useEffect(function(){var fetchMyAPI=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var initialDailyData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchDailyData();case 2:initialDailyData=_context.sent;setDailyData(initialDailyData);case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchMyAPI(){return _ref2.apply(this,arguments);};}();fetchMyAPI();},[]);var barChart=confirmed?/*#__PURE__*/React.createElement(Bar,{data:{labels:['Infected','Recovered','Deaths'],datasets:[{label:'People',backgroundColor:[\"rgba(0, 0, 255, 0.5)\",\"rgba (0, 255,0,0.5)\",\"rgba(255, 0, 0, 0.5)\"],data:[confirmed.value,recovered.value,deaths.value]}]},options:{legend:{display:false},title:{display:true,text:\"Current State in \".concat(country)}}}):null;var lineChart=dailyData[0]?/*#__PURE__*/React.createElement(Line,{data:{labels:dailyData.map(function(_ref3){var date=_ref3.date;return date;}),datasets:[{data:dailyData.map(function(_ref4){var data=_ref4.data;return data.confirmed;}),label:'Infected',borderColor:'red',fill:true},{data:dailyData.map(function(_ref5){var data=_ref5.data;return data.deaths;}),label:'Deaths',borderColor:'black',backgroundColor:'rgba(255,0,0,0.5)',fill:true}]}}):null;return/*#__PURE__*/React.createElement(\"div\",{classname:styles.container},country?barChart:lineChart);};export default Chart;","map":{"version":3,"sources":["/Users/petrafranklin/Coding_DoJo/mern/Assignments/covid_tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetchMyAPI","initialDailyData","barChart","labels","datasets","label","backgroundColor","value","legend","display","title","text","lineChart","map","date","borderColor","fill","container"],"mappings":"+hBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,cAAT,KAA+B,WAA/B,CACA,OAASC,IAAT,CAAeC,GAAf,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAuD,oBAApDC,IAAoD,CAA7CC,SAA6C,WAA7CA,SAA6C,CAAlCC,SAAkC,WAAlCA,SAAkC,CAAvBC,MAAuB,WAAvBA,MAAuB,CAAdC,OAAc,MAAdA,OAAc,eAC/BX,QAAQ,CAAC,EAAD,CADuB,wCAC1DY,SAD0D,eAC/CC,YAD+C,eAGjEZ,SAAS,CAAC,UAAM,CACZ,GAAMa,CAAAA,UAAU,2FAAG,8KACgBZ,CAAAA,cAAc,EAD9B,QACTa,gBADS,eAGfF,YAAY,CAACE,gBAAD,CAAZ,CAHe,sDAAH,kBAAVD,CAAAA,UAAU,2CAAhB,CAKAA,UAAU,GACb,CAPQ,CAOP,EAPO,CAAT,CASA,GAAME,CAAAA,QAAQ,CACVR,SAAS,cACL,oBAAC,GAAD,EACI,IAAI,CAAE,CACFS,MAAM,CAAE,CAAC,UAAD,CAAY,WAAZ,CAAyB,QAAzB,CADN,CAEFC,QAAQ,CAAE,CAAC,CACPC,KAAK,CAAE,QADA,CAEPC,eAAe,CAAE,CAAC,sBAAD,CAAyB,qBAAzB,CAA+C,sBAA/C,CAFV,CAGXb,IAAI,CAAC,CAACC,SAAS,CAACa,KAAX,CAAkBZ,SAAS,CAACY,KAA5B,CAAmCX,MAAM,CAACW,KAA1C,CAHM,CAAD,CAFR,CADV,CAWA,OAAO,CAAE,CACLC,MAAM,CAAC,CAAEC,OAAO,CAAC,KAAV,CADF,CAELC,KAAK,CAAE,CAAED,OAAO,CAAC,IAAV,CAAgBE,IAAI,4BAAqBd,OAArB,CAApB,CAFF,CAXT,EADK,CAiBL,IAlBR,CAqBA,GAAMe,CAAAA,SAAS,CACXd,SAAS,CAAC,CAAD,CAAT,cAEI,oBAAC,IAAD,EACA,IAAI,CAAE,CACFK,MAAM,CAAEL,SAAS,CAACe,GAAV,CAAc,mBAAGC,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EAAd,CADN,CAEFV,QAAQ,CAAE,CAAC,CACPX,IAAI,CAAEK,SAAS,CAACe,GAAV,CAAc,mBAAGpB,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAI,CAACC,SAAnB,EAAd,CADC,CAEPW,KAAK,CAAE,UAFA,CAGPU,WAAW,CAAE,KAHN,CAIPC,IAAI,CAAE,IAJC,CAAD,CAKP,CACCvB,IAAI,CAAEK,SAAS,CAACe,GAAV,CAAc,mBAAGpB,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAI,CAACG,MAAnB,EAAd,CADP,CAECS,KAAK,CAAE,QAFR,CAGCU,WAAW,CAAE,OAHd,CAICT,eAAe,CAAE,mBAJlB,CAKCU,IAAI,CAAE,IALP,CALO,CAFR,CADN,EAFJ,CAmBE,IApBN,CAwBA,mBACI,2BAAK,SAAS,CAAEzB,MAAM,CAAC0B,SAAvB,EACKpB,OAAO,CAAGK,QAAH,CAAcU,SAD1B,CADJ,CAKH,CA9DD,CAgEA,cAAepB,CAAAA,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ data: {confirmed, recovered, deaths}, country }) => {\n    const [dailyData, setDailyData] = useState({});\n\n    useEffect(() => {\n        const fetchMyAPI = async () => {\n            const initialDailyData = await fetchDailyData();\n            \n            setDailyData(initialDailyData);\n        };\n        fetchMyAPI();\n    },[]);\n\n    const barChart = (\n        confirmed ? (\n            <Bar\n                data={{\n                    labels: ['Infected','Recovered', 'Deaths'],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: [\"rgba(0, 0, 255, 0.5)\", \"rgba (0, 255,0,0.5)\",\"rgba(255, 0, 0, 0.5)\"],\n                    data:[confirmed.value, recovered.value, deaths.value],\n\n                },\n                ], \n            }}\n            options={{ \n                legend:{ display:false },\n                title: { display:true, text:`Current State in ${country}`},\n            }}\n            />\n        ) : null\n    );\n                \n    const lineChart = (\n        dailyData[0]\n            ? (\n            <Line\n            data={{\n                labels: dailyData.map(({ date }) => date),\n                datasets: [{\n                    data: dailyData.map(({ data }) => data.confirmed),\n                    label: 'Infected',\n                    borderColor: 'red',\n                    fill: true,\n                }, {\n                    data: dailyData.map(({ data }) => data.deaths),\n                    label: 'Deaths',\n                    borderColor: 'black',\n                    backgroundColor: 'rgba(255,0,0,0.5)',\n                    fill: true, \n                },\n            ],\n        }}\n    />) : null\n    );\n\n\n    return (\n        <div classname={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    );\n};\n\nexport default Chart\n"]},"metadata":{},"sourceType":"module"}